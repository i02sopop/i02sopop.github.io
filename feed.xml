<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>Ritho&#39;s blog</title> <description>My name is Pablo Alvarez de Sotomayor Posadillo, and Iâ€™m a Free Software activist from Cordoba (Spain). I&#39;m currently living in Mexico City, and I&#39;m currently working on Segundamano Mexico, which it&#39;s part of Schibsted Classifieds Media. In this blog I&#39;ll write both technical posts and personal opinions, but I&#39;ll try to focus on the technical posts as much as possible. This is my personal blog, so every opinion I write here is my own personal opinion. If you want to know a little more about me you can visit </description> <link>http://blog.ritho.net/</link> <atom:link href="http://blog.ritho.net/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Thu, 09 Jun 2016 23:46:56 -0500</pubDate> <lastBuildDate>Thu, 09 Jun 2016 23:46:56 -0500</lastBuildDate> <generator>Jekyll v3.1.6</generator> <item> <title>Make tests on Android projects III</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; I had prepared the next entry of the Android testing tutorial, but I&#39;ve found a &lt;a href=&quot;http://www.vogella.com/articles/AndroidTesting/article.html&quot;&gt;tutorial&lt;/a&gt; that explains everything about it, even some of the projects that improve the Android test environment, so I&#39;ve decided not reinvent the wheel and stop this tutorial. It&#39;s true that some parts seems more a summary than a tutorial, but there&#39;s nothing essential missing.&lt;/p&gt; &lt;p&gt; I know you will miss my explanations, but, as usual, I don&#39;t have much time and I prefer to blog about new things, so sorry about keeping you in the half of the process&lt;/p&gt; &lt;p&gt; :(.&lt;/p&gt; &lt;p&gt; Happy Hacking!&lt;/p&gt; </description> <pubDate>Sat, 26 Oct 2013 18:56:00 -0500</pubDate> <link>http://blog.ritho.net/2013/10/26/android-testing-III/</link> <guid isPermaLink="true">http://blog.ritho.net/2013/10/26/android-testing-III/</guid> <category>Android</category> <category>Java</category> <category>Development</category> </item> <item> <title>Happy Birthday GNU!</title> <description>&lt;p&gt; Hi all,&lt;/p&gt; &lt;p&gt; Some days ago the GNU project got 30 years, and, thinking about all the things that GNU and the free software have given to us I think it&#39;s time to give them a present. It doesn&#39;t have to be money (although they deserve it), but some code, an article, an speech explaining the virtues of the free software, or even installing a free software to a friend or a family member.&lt;/p&gt; &lt;p&gt; In my case, I&#39;m going to renew my membership to fsfeurope and I&#39;m going to publish as free software a project that I&#39;m doing with some partners. And you? Are you going to give a present to GNU/fsf?&lt;/p&gt; &lt;p&gt; Happy Hacking&lt;/p&gt; </description> <pubDate>Mon, 30 Sep 2013 00:40:00 -0500</pubDate> <link>http://blog.ritho.net/2013/09/30/GNU-30-years/</link> <guid isPermaLink="true">http://blog.ritho.net/2013/09/30/GNU-30-years/</guid> <category>GNU</category> <category>Free software</category> </item> <item> <title>Make tests on Android projects II</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; As I promised more than a year ago ;) I&#39;m going to continue the small tutorial about testing on Android. During this year the testing on android has evolved a little bit and now we can see projects, like robotium, that, although they have some errors and features not (well) covered, helps you a lot in the testing process. Said that, let&#39;s start!&lt;/p&gt; &lt;!--more--&gt; &lt;p&gt; The first step to test an android application (apart from having the code of the android application, of course) is create a test project. For that we are going to use the command line, mainly because, although you can use very complete graphical editors that helps you to do much of the process automatically, I think it&#39;s important to know where the things come from and why the things work in that way. So, the command line to create the test project (as we can check &lt;a href=&quot;https://developer.android.com/tools/testing/testing_otheride.html&quot;&gt;here&lt;/a&gt;) is:&lt;/p&gt; &lt;p&gt; $ android create test-project -m &amp;lt;main-path&amp;gt; -n &amp;lt;project-name&amp;gt; -p &amp;lt;test-path&amp;gt;&lt;/p&gt; &lt;p&gt; Where main-path is the path to the project of the application under test, project-name is the name of the test project (not the name of the main project) and test-path is the directory where the test project is going to be located. A test project depends on the android project that is testing, so is going to compile against this project, recompiling (with a little bit of luck) all the source files of the original project that needs to (re)compile, that&#39;s why we need to indicate the path of the main project under test.&lt;/p&gt; &lt;p&gt; That also means that a test project is going to test only one application at a time, but it can be updated to change the path of the main project for the case you want to test another project with the same test project (for example, if you have two projects of the same application, one for a free version and other for a premium version, or if you have a base test project that you want to adapt to new applications).&lt;/p&gt; &lt;p&gt; The test project doesn&#39;t need to be located in any specific directory, so you can place it wherever you want in your filesystem, but take care if you move the test project and you&#39;ve defined a relative path to the main project, because you&#39;d need to update it.&lt;/p&gt; &lt;p&gt; If you check the test project just created, you can see that it haves the same directory structure and build file contents as regular Android application project. That&#39;s because it&#39;s an actual Android application that use the testing and instrumentation framework and depends on other application to run (like an application that use a library).&lt;/p&gt; &lt;p&gt; The test framework is an extension of the JUnit test framework that adds access to the Android system objects to test them, and the instrumentation framework is who actually execute the tests, starting the application at the beginning of each test suite, shutting down the application once the test suite is finished and who runs test by test of each test suite.&lt;/p&gt; &lt;p&gt; Well, that&#39;s enough for today. In the next post I&#39;ll explain the compilation process of a test project (checking the options at the compilation files) and how to run both on test in particular and all the tests of the test project. In that way you can see the basic structure of a test.&lt;/p&gt; &lt;p&gt; &lt;b&gt;To be continued&amp;#x2026;&lt;/b&gt;&lt;/p&gt; </description> <pubDate>Sun, 22 Sep 2013 19:49:00 -0500</pubDate> <link>http://blog.ritho.net/2013/09/22/android-testing-II/</link> <guid isPermaLink="true">http://blog.ritho.net/2013/09/22/android-testing-II/</guid> <category>Android</category> <category>Java</category> <category>Development</category> </item> <item> <title>I&#39;m Back!</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; I know it hass been more than a year without writing anything, but, between my absorving work and the fact that I&#39;m not really good with the written world (and a little bit of lazyness, why no admit it), I didn&#39;t found the time to dedicate to the blog.&lt;/p&gt; &lt;p&gt; Now I&#39;m not going to give promises, but I&#39;m going to try it hard to write at least one post per week, and who knows, maybe once I&#39;ve started to write I can write more often and more fluently.&lt;/p&gt; &lt;p&gt; Well, you&#39;ll have notices from me during this week.&lt;/p&gt; &lt;p&gt; Happy Hacking!&lt;/p&gt; </description> <pubDate>Tue, 17 Sep 2013 18:42:00 -0500</pubDate> <link>http://blog.ritho.net/2013/09/17/back/</link> <guid isPermaLink="true">http://blog.ritho.net/2013/09/17/back/</guid> <category>General</category> </item> <item> <title>Make tests on Android projects I</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; As you might know if you follow my blog I&#39;m working at Schibsted, and one of the projects we are developing is an Android application to access to the classifieds websites of the company (like custojusto.pt, bomnegocio.com, tori.fi, &amp;#x2026;). One of the ideas that defines our work method, Extreme Programming, is the continuous integration of the new developments (or iterations) of the project, so we have to include tests on every project we have in order to check the backward compatibility, and the Android project is not an exception.&lt;/p&gt; &lt;!--more--&gt; &lt;p&gt; Making tests for any Android application (I should say on any mobile application, but I&#39;ve only seen Android and IOS) is a pain, and for a lot of reasons, including:&lt;/p&gt; &lt;ul class=&quot;org-ul&quot;&gt; &lt;li&gt;To test any android application you must have an android environment up and running. That means that the tests are going to be slow because they are going to run in a complete android environment (that can be a virtual machine, an emulator or a real device). &lt;p&gt; It also means that you have to get several environment (android version and devices) to test your application, because even with the same version of Android the execution can be quite different between on device and another (you find differences even between one device emulator and the real device!).&lt;/p&gt; &lt;p&gt; Only this can make the tests veeeeeery slow.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;The test is a different project running in a different process. This means that the test have to compile against the project, so every change on the project lead to a clean and recompilation of all the tests. That&#39;s because ant is not so good as Makefile checking the dependencies of each file (at least by default in the Android projects, I supose it can be quite better if you customize it to resolve all your dependencies, but this is not the usual). Sometimes even I uninstall all the test project in order to delete from the emulator some garbage that adb/android didn&#39;t delete at the reinstallation. &lt;p&gt; This also means that the test is responsible of running up the applicatiion, set up all the parameters you need and shut down the application. This is not bad, but I think the Android sdk should include a testing environment capable of setting up and down the application by you, so you don&#39;t have to do it in each test.&lt;/p&gt; &lt;p&gt; Also, you have to know what actions have to be done at the test process and what actions should be done at the application process (or wait until the android test run an exception telling you that you have to run some action in the application process).&lt;/p&gt; &lt;p&gt; Finally, if your application depends on an external application (like the gallery or an email application) it&#39;s almost impossible to test this part of the application, because you can test and control the application (or process) that you are developing, not an external application, so in some cases there are parts of you application impossible to test, because it&#39;s not possible (at least I didn&#39;t found how) to simulate an external calling.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;The documentation about testing is risible. Appart of some basic documentation and examples at the official &lt;a href=&quot;https://developer.android.com/&quot;&gt;android developers page&lt;/a&gt; there isn&#39;t any documentation of quality about the testing process, so it&#39;s very hard to learn how the tests works and to make a good testsuite of your Android application. I&#39;ve found some posts that even recommend you to test your application directly on the physical device :). &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For this reasons in the next few days I&#39;m going to make a little tutorial about how to make some tests to your Android application&lt;/p&gt; &lt;p&gt; &lt;b&gt;To be continued&amp;#x2026;&lt;/b&gt;&lt;/p&gt; </description> <pubDate>Tue, 01 May 2012 21:45:00 -0500</pubDate> <link>http://blog.ritho.net/2012/05/01/android-testing/</link> <guid isPermaLink="true">http://blog.ritho.net/2012/05/01/android-testing/</guid> <category>Android</category> <category>Java</category> <category>Development</category> </item> <item> <title>Coconet 1.0.2 is out!</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; We have a new release of Coconet, in this case the version 1.0.2. In this step I&#39;ve finished the translations into english of all the code (global variables, functions and structs) and I&#39;ve made some extra optimizations of the code (nothing important).&lt;/p&gt; &lt;p&gt; In the next days/weeks (I&#39;ve to work and to advance in other projects :)) I&#39;m going to port the project compilation process to autoconf and automake. I want also to start the refactoring of the code to remove at least some of the global variables and make some more important optimizations of it.&lt;/p&gt; &lt;p&gt; If you want to try the latest stable version you can download it from &lt;a href=&quot;https://github.com/i02sopop/coconet/tarball/v1.0.2&quot;&gt;here&lt;/a&gt;, and if you want to checkout the code from the repository and collaborate with me please visit the &lt;a href=&quot;https://github.com/i02sopop/coconet&quot;&gt;github repository page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; Happy Hacking!!!&lt;/p&gt; </description> <pubDate>Tue, 01 May 2012 16:51:00 -0500</pubDate> <link>http://blog.ritho.net/2012/05/01/coconet-1.0.2/</link> <guid isPermaLink="true">http://blog.ritho.net/2012/05/01/coconet-1.0.2/</guid> <category>projects</category> <category>coconet</category> <category>development</category> </item> <item> <title>Coconet 1.0.1 is out!</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; Today (well, actually yesterday :)) I&#39;ve launched Coconet 1.0.1, the first step to modernize my ending project at the University. In this first step I&#39;ve translated the comments and part of the code (it left the functions name and the data structures) into english and I&#39;ve made some little optimizations. I&#39;ve also structured a little bit the project, but I&#39;ve to add some additional information.&lt;/p&gt; &lt;p&gt; My next steps are finishing the translation of all the code, make a review of all the code to enhace the design and optimize it, port the build of the project to autoconf and automake and make a simple web page of the project containing its basic information, some links to download the code (as a package and from the repository), &amp;#x2026;&lt;/p&gt; &lt;p&gt; If you want to try the latest stable version you can download it from &lt;a href=&quot;https://github.com/i02sopop/coconet/tarball/v1.0.1&quot;&gt;here&lt;/a&gt;, and if you want to checkout the code from the repository and collaborate with me please visit the &lt;a href=&quot;https://github.com/i02sopop/coconet&quot;&gt;github repository page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; Happy Hacking!!!&lt;/p&gt; </description> <pubDate>Sun, 04 Mar 2012 00:03:00 -0600</pubDate> <link>http://blog.ritho.net/2012/03/04/coconet-1.0.1/</link> <guid isPermaLink="true">http://blog.ritho.net/2012/03/04/coconet-1.0.1/</guid> <category>projects</category> <category>coconet</category> <category>development</category> </item> <item> <title>Latest adquisitionsn</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; I&#39;m back from South America (I&#39;ve been 6 weeks in Chile and Argentina) with some good and bad news. The bad new is that I&#39;ve been stolen and I don&#39;t have anymore some of my technical stuff, like a laptop, an external hard drive, a tablet and some other things. I&#39;ve also lost some information, specially documentation and some projects of my studies and previous works.&lt;/p&gt; &lt;p&gt; The good thing is that I&#39;ve to restore some of the things I&#39;ve lost, so I bought a desktop computer and a netbook. The desktop computer is an AMD with 8 cores of 3.1GHz each, 8 GB of RAM, a 1 GB graphic card with hdmi output and a 120 GB SSD hard drive. Yes, it&#39;s a great computer, so it&#39;s going to stay with me for a really long time.&lt;/p&gt; &lt;p&gt; The other toy I&#39;ve bought, the netbook, is an Asus eeepc of 10&#39; with two cores of 1.67GHz each, 1 GB of RAM and a hard drive of 250 GB, more than enough to have mobility and a real computer for my travels. I think that between the two toys I&#39;m going to be very productive, so I hope you&#39;ll see me more active in my projects and around here.&lt;/p&gt; &lt;p&gt; Happy Hacking!!!&lt;/p&gt; </description> <pubDate>Sat, 03 Mar 2012 23:09:00 -0600</pubDate> <link>http://blog.ritho.net/2012/03/03/latest-adquisitions/</link> <guid isPermaLink="true">http://blog.ritho.net/2012/03/03/latest-adquisitions/</guid> <category>General</category> </item> <item> <title>Geekphone Zero review</title> <description>&lt;p&gt; Hi all!&lt;/p&gt; &lt;p&gt; First of all, please apologize for not publishing anything in three months, but both because of work (with several travels in the middle) and personal projects I didn&#39;t have so much time to write.&lt;/p&gt; &lt;p&gt; To celebrate my birthday (I&#39;m 30!!!!) I&#39;m going to write a review of my new cell phone, the &lt;a href=&quot;http://www.geeksphone.com/es/moviles/zero/&quot;&gt;Geekphone Zero&lt;/a&gt;. I got the phone at christmas and I&#39;ve to say that I&#39;m very happy with it, because it works pretty well (with some minor bugs related to the version of Android I&#39;m using), having a great quality/price rate.&lt;/p&gt; &lt;p&gt; Its price is 165 euros free (without a phone company contract), a reasonable price to a smartphone with Android (a high-end smartphone cost perfectly 400-500 euros free), and with all your basics covered (wifi, usb, bluetooth, gps, &amp;#x2026;) and, with the last version of Android 2.3, it goes pretty smooth.&lt;/p&gt; &lt;p&gt; One of the major advantages of the phone is that you have root access, so you can update it without losing the warranty. In fact, the company work closely with the CyanogenMod group, so there is no problem to install new updates of the phone from the Cyanogen ROM application.&lt;/p&gt; &lt;p&gt; Happy Hacking!&lt;/p&gt; </description> <pubDate>Tue, 24 Jan 2012 17:15:00 -0600</pubDate> <link>http://blog.ritho.net/2012/01/24/geekphone-review/</link> <guid isPermaLink="true">http://blog.ritho.net/2012/01/24/geekphone-review/</guid> <category>Android</category> </item> <item> <title>RIP</title> <description>&lt;p&gt; As you may now by now, this month had passed out three important figures in the Computer Science world: Steve Jobs, Dennis Ritchie and John McCarthy.&lt;/p&gt; &lt;!--more--&gt; &lt;p&gt; Steve Jobs is the most famous of them by the general public, but, at the same time, the less influential in the Computer Science world. His most important achieve has been to change the perception and use of the technology of a lot of people. He was capable of innovate and connect with the general public, but, in my point of view, he was wrong about oe essential thing, the openness of his products. During all his career, and specially during his last years, he has managed his products in a closed way (he even didn&#39;t want to open the apple market to independent developers!) and I think he has missed the opportunity to really change the world if he would made free (as in freedom) at least any of his products.&lt;/p&gt; &lt;p&gt; Dennis Ritchie, as many of the articles has said about him, is one of the original hackers. His great contribution (with other hackers) to our world include the C programming language (probably the most used programming language of all the times) and the Unix Operating System (the same used by apple to develop Mac OS and used as a reference by Richard M. Stallman and Linus Torvalds to develop GNU/Linux). This is a perfect example of how a free software can influence in the world (remember that Unix, at the beginnig, was open, and was after its success when companies and organizations started to launch his own closed version of Unix).&lt;/p&gt; &lt;p&gt; The last one that have passed out is John McCarthy, creator of the Lisp programming language and of the term Artificial Intelligence. The Lisp programming language is less used than the C programming language, but it has been the most used programming language in Artificial Intelligence, in wich he is one of the major contributors. He also was the first to publicly suggest that computer time-sharing technology might lead to a future in which computing power and even specific applications could be sold through the utility business model.&lt;/p&gt; &lt;p&gt; We&#39;re going to miss them and we&#39;ll try to continue their work the better we can.&lt;/p&gt; &lt;p&gt; RIP&lt;/p&gt; </description> <pubDate>Sun, 30 Oct 2011 03:47:00 -0600</pubDate> <link>http://blog.ritho.net/2011/10/30/RIP/</link> <guid isPermaLink="true">http://blog.ritho.net/2011/10/30/RIP/</guid> <category>General</category> </item> </channel> </rss>