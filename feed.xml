<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ritho's blog</title>
    <description>My name is Pablo Alvarez de Sotomayor Posadillo, and Iâ€™m a Free Software activist from Cordoba (Spain). I'm currently living in Mexico City, and I'm currently working on Segundamano Mexico, which it's part of Schibsted Classifieds Media.
In this blog I'll write both technical posts and personal opinions, but I'll try to focus on the technical posts as much as possible. This is my personal blog, so every opinion I write here is my own personal opinion. If you want to know a little more about me you can visit
</description>
    <link>https://blog.ritho.net/</link>
    <atom:link href="https://blog.ritho.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 25 Mar 2020 02:02:10 +0100</pubDate>
    <lastBuildDate>Wed, 25 Mar 2020 02:02:10 +0100</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>New job at Lana</title>
        <description>&lt;p&gt;
This year has come with an important change in my working side. In mid January
I've finished my work relationship with Zaleos, and, since the beginning of
March, I've started working at Lana.
&lt;/p&gt;

&lt;p&gt;
As you know, in May I decided to come back to Spain, and I had to thank the
opportunity to Zaleos. I have learned a lot in Zaleos during the time I've worked
there, and I think they have a great team. Still, at some point, we had some
differences in our daily job and, finally, they decided to let me go. I think it
wasn't an easy decision for them. For me, besides the initial bad sensation (it
never feels good when any company let you go), I think it was a good decision
because I wasn't feeling too comfortable either. I think that probably with better
communication and some work we could make it work. Still, finally, it was their
decision, and I understand it.
&lt;/p&gt;

&lt;p&gt;
On the bride side, I've started working at Lana since the beginning of March as
Senior Backend Developer. Lana is a Fintech that started inside Cabify with a
solution to disperse payments to the Cabify drivers, and it has some exciting
projects to grow the company. The backend stack is done entirely in Golang, using
technologies like Kubernetes or Elastic Search, and, since it's a new startup,
there's a lot of exciting work to do. The project has a bit more than two years,
so you can imagine the amount of work to do and new ideas we want to try. I hope
not only to learn a lot about technology and the financial business side but also
aport my knowledge and experience to the project. Since the tech team is split
into several locations (we have developers in Mexico, Chile, Amsterdam, Madrid,
Malaga, &amp;#x2026;) I'll keep working from Cordoba, which is good news for me too :).
&lt;/p&gt;

&lt;p&gt;
I have several pending posts about things I've learned in Zaleos about SIP, and
I'm sure I'll publish new blog posts related to my current work, so keep in the
loop.
&lt;/p&gt;

&lt;p&gt;
Happy Hacking!
&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jan 2020 00:00:00 +0100</pubDate>
        <link>https://blog.ritho.net/general/2020/01/05/new-job.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/general/2020/01/05/new-job.html</guid>
        
        <category>Personal</category>
        
        <category>Work</category>
        
        
        <category>General</category>
        
      </item>
    
      <item>
        <title>Moving back to Spain</title>
        <description>&lt;p&gt;
Hi all,
&lt;/p&gt;

&lt;p&gt;
After more than three and a half years in Mexico working at Segundamano Mexico,
I've decided to accept an offer from &lt;a href=&quot;https://www.zaleos.net/&quot;&gt;Zaleos&lt;/a&gt; and come back to Spain. As you may
know, I've been working at Schibsted (the company that owns Segundamano) for
eight years, first in Madrid for four years and a half approximately and later
in Mexico City for the last three and a half years,. This time has been an
amazing time, both personally (I've met some great people, some of them will
remain friends in the future) and professionally (I can't even list all the
things I've learned during this time). But at a certain point, I felt that I
needed a new challenge to keep growing professionally. At the same time, I wanted
to be closer to my family, since we were more than 10000 km away, and that is
where Zaleos comes.
&lt;/p&gt;

&lt;p&gt;
Zaleos is a software development company that develops IP based solutions to
provide to the Public Safety sector with the much-needed ability to interface
with multiple sources of data and receive critical, real-time information from
callers in need. I expect to see technologies related to VoIP and real-time
protocols, a full new field for me in the working environment, so don't be
surprised if I start posting entries about real-time protocols :).
&lt;/p&gt;
</description>
        <pubDate>Thu, 09 May 2019 00:00:00 +0200</pubDate>
        <link>https://blog.ritho.net/general/2019/05/09/moving-back-to-spain.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/general/2019/05/09/moving-back-to-spain.html</guid>
        
        <category>Personal</category>
        
        <category>Work</category>
        
        
        <category>General</category>
        
      </item>
    
      <item>
        <title>How to build your own perl module distribution</title>
        <description>&lt;p&gt;
Every time I have the chance of programming in Perl, I enjoy it more and more
because it's a language that adapts to my needs very easily. Sometimes I want to
create a module to reuse the functionality that repeats over and over in my Perl
scripts. Still, until not long ago, I have never known how to prepare my Perl
modules to build and install them easily in my computers.
&lt;/p&gt;

&lt;p&gt;
Recently I have finished reading the O'Reilly book &lt;a href=&quot;https://www.intermediateperl.com/about/&quot;&gt;Intermediate Perl&lt;/a&gt;, which
contains a specific chapter on how to build your modules to distribute them and
another one on how to publish your package in CPAN. I want to summarize here what
I have learned in order both to have my own notes and don't forget about it and
to share my experience with you.
&lt;/p&gt;

&lt;p&gt;
The first thing to do when you want to build your own Perl module distribution is
to initialize the first module you want to develop. For that, you can use
&lt;b&gt;&lt;i&gt;module-starter&lt;/i&gt;&lt;/b&gt;, which is a simple starter kit for any module. To install it
&lt;b&gt;&lt;i&gt;CPAN&lt;/i&gt;&lt;/b&gt; is your friend:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;cpan -i Module::Starter
cpan -i Module::Starter::AddModule
cpan -i Module::Build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Once installed you can use the command &lt;b&gt;&lt;i&gt;module-starter&lt;/i&gt;&lt;/b&gt; to create the basic
structure of the module:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;module-starter --mb --module=&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;ModuleName&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This command creates a new subdirectory called &lt;b&gt;&lt;i&gt;ModuleName&lt;/i&gt;&lt;/b&gt; with the basic
structure of the module, including the directory &lt;b&gt;&lt;i&gt;t&lt;/i&gt;&lt;/b&gt; for tests, the directory
&lt;b&gt;&lt;i&gt;lib&lt;/i&gt;&lt;/b&gt; with the module file &lt;b&gt;&lt;i&gt;ModuleName.pm&lt;/i&gt;&lt;/b&gt;, the Perl script &lt;b&gt;&lt;i&gt;Build.PL&lt;/i&gt;&lt;/b&gt; with
configurations to generate the module distribution (something like a Makefile)
and the script &lt;b&gt;&lt;i&gt;Build&lt;/i&gt;&lt;/b&gt; to generate the module distribution. To build the module
itself, you usually use the following commands are:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;Perl Build.PL
./Build
./Build test
./Build disttest
./Build dist
./Build install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The first command, &lt;b&gt;&lt;i&gt;perl Build.PL&lt;/i&gt;&lt;/b&gt;, is going to update the &lt;b&gt;&lt;i&gt;Build&lt;/i&gt;&lt;/b&gt; script
when any configuration changes (if you add a new module or change the version
number, for example). After the &lt;b&gt;&lt;i&gt;Build&lt;/i&gt;&lt;/b&gt; script is updated, you can use it to
build the module, test it, run the tests for the distribution package, generate
a distribution package or install it in your system.
&lt;/p&gt;

&lt;p&gt;
The module generated with &lt;b&gt;&lt;i&gt;module-starter&lt;/i&gt;&lt;/b&gt; has the default structure for any
Perl module, including the &lt;b&gt;&lt;i&gt;perldoc&lt;/i&gt;&lt;/b&gt; documentation section, the code that the
module includes and the end of the module itself, so it's ready for you to add
the code and put the proper documentation.
&lt;/p&gt;

&lt;p&gt;
If you want to add a new module to the distribution, you can add it with the next
command:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;module-starter --module=&lt;span style=&quot;color: #ffa07a;&quot;&gt;&quot;ModuleName2&quot;&lt;/span&gt; --dist=.
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As you see, the command is pretty similar to the first one used to generate the
distribution, but with a new argument, &lt;b&gt;&lt;i&gt;&amp;#x2013;dist=.&lt;/i&gt;&lt;/b&gt;, which indicates that the
module is going to be added to the distribution located in the current directory.
If you want to see more documentation on the building process, you can check the
&lt;a href=&quot;https://metacpan.org/pod/Module::Build&quot;&gt;module::Build documentation&lt;/a&gt;, including the configuration options for &lt;b&gt;&lt;i&gt;Build.PL&lt;/i&gt;&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
Once you are happy with your distribution, you can publish it to CPAN, which is
the subject for a next blog entry.
&lt;/p&gt;

&lt;p&gt;
Happy Hacking!
&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Mar 2019 00:00:00 +0100</pubDate>
        <link>https://blog.ritho.net/perl/2019/03/10/perl-distribution.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/perl/2019/03/10/perl-distribution.html</guid>
        
        <category>Perl</category>
        
        <category>Programming</category>
        
        
        <category>Perl</category>
        
      </item>
    
      <item>
        <title>UHK Keyboard review</title>
        <description>&lt;p&gt;
Short after I came into Mexico to work, in December 2015, I found a project in
Crowd Supply for a new keyboard that draws my attention, the Ultimate Hacking
Keyboard (a.k.a &lt;a href=&quot;https://ultimatehackingkeyboard.com/&quot;&gt;UHK&lt;/a&gt;), and I decided to buy one. The characteristics that impressed
me the most were that it was a mechanical keyboard (I'm a fan of mechanical
keyboards) and, more important, it could split into two halves.
&lt;/p&gt;

&lt;p&gt;
After a long wait (its delivery was delayed for more than two years) I can say
I'm delighted with my acquisition. It's not the perfect keyboard, but it's quite
close. What I miss the most from the keyboard is some extra separated keys, like
the escape key or the arrow keys, but, on the other hand, it's easily configurable
via its agent, so I'll be doing some changes to be more and more comfortable with
it. The agent is Free Software, provided by the company that makes the keyboard,
and available for Linux, macOS and Windows, which is something to appreciate.
&lt;/p&gt;

&lt;p&gt;
As I suspected, the fact that it is a mechanical keyboard makes it very gentle
with my fingers, and the fact that I can split it and orient it with several
sideboards makes me feel more natural in my posture when I write with the UHK.
It also comes with a wood palm rest that is comfortable for my wrist, and the
size is compact but not too small, so I can move it around from my apartment to
my office in my bag and, at the same time, is not too small that I type several
keys at the same time.
&lt;/p&gt;

&lt;p&gt;
I know it's not a cheap keyboard. Still, the quality worth it, and the agent, the
keyboard firmware and its schematics are free (as in Free Software), so you are
not only buying a great keyboard but supporting the Free Software and Hardware
movement, apart from an honest business. I also appreciate a lot the excellent
communication the UHK makers do, since they share all the progress of building
the keyboard and the modules, the difficulties they have found, &amp;#x2026; I can assure
it's not common to find a project that opens in all their path from the original
idea of the final product.
&lt;/p&gt;

&lt;p&gt;
The only thing I'm waiting now for is two extensions I ordered with the keyboard.
The first one is a trackball to attach the mouse, and the second one is three extra
keys that I plan to use to define some macros to make more automatic some recurrent
tasks.
&lt;/p&gt;

&lt;p&gt;
Happy Hacking!
&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Sep 2018 00:00:00 +0200</pubDate>
        <link>https://blog.ritho.net/uhk/2018/09/15/uhl-keyboard.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/uhk/2018/09/15/uhl-keyboard.html</guid>
        
        <category>UHK</category>
        
        <category>Keyboard</category>
        
        
        <category>UHK</category>
        
      </item>
    
      <item>
        <title>Kubernetes preview</title>
        <description>&lt;p&gt;
  I've recently assisted to a O'Reilly training sessions in &lt;a href=&quot;http://safari.oreilly.com&quot;&gt;Safari&lt;/a&gt;
  about Kubernetes and my first impression about the tool is quite good, so I
  want to review the things I've liked more and the things I miss.
&lt;/p&gt;
&lt;p&gt;
  For those you don't know, &lt;a href=&quot;http://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt; is an
  open-source system for automating deployment, scaling, and management of
  containerized applications. It works natively with &lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt;
  to make easy both to deploy new versions of your app and scale them.
&lt;/p&gt;
&lt;p&gt;
  Although it was originally developed by Google (based on their internal project
  Borg), now is one of the most important projects for deployment projects with
  Apache Mesos and several of the big software companies apport to the project.
&lt;/p&gt;
&lt;p&gt;
  One of the things I like of the project is that is quite easy to setup a Kubernetes
  cluster in different environments (you can use it in the cloud on AWS and Google
  Cloud or in local with tools like minikube), and you can manage it both with a web
  interface or in the terminal, make it easier to make scripts to deploy new versions
  of your application.
&lt;/p&gt;
&lt;p&gt;
  The interface and commands seems to be quite easy to use, and the configurations,
  defined in yaml, are also quite straightforward to use. I particularly like how
  they give you the possibility of defining secrets for your application, so you can
  have the general configurations on your repository/docker image and keep safe
  your secrets.
&lt;/p&gt;
&lt;p&gt;
  The only thing that, for now, I've missed is the possibility to define the number
  of nodes of your application based on the resources of your application in each
  moment, instead of changing the number of nodes by hand when you need it. Maybe
  it's a functionality that is already there, but until now I didn't see the option.
&lt;/p&gt;
&lt;p&gt;
  There are examples on how to use Kubernetes for several applications, like wordpress,
  postgresql (with one master and one or several slaves), ..., so it shouldn't be too
  complicated to set your own configurations for your project. I've planned to play more
  with Kubernetes, so as soon as I have some examples to show I'll post them in here.
&lt;/p&gt;
&lt;p&gt;
  Happy Hacking!
&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Feb 2017 10:20:00 +0100</pubDate>
        <link>https://blog.ritho.net/devops/2017/02/25/kubernetes-preview.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/devops/2017/02/25/kubernetes-preview.html</guid>
        
        <category>Devops,</category>
        
        <category>Kubernetes,</category>
        
        <category>Docker</category>
        
        
        <category>Devops</category>
        
      </item>
    
      <item>
        <title>Octopress 3</title>
        <description>&lt;p&gt;
I have to admit that I've been quite lazy in the last three years in terms of
blogging, but recently I had some time, so I've moved my old blog to octopress 3.
&lt;/p&gt;

&lt;p&gt;
In general, it looks like it's easier to work with once is set up correctly, but
there's not so much documentation as with octopress 2 and build it up is a little
bit more try and error.
&lt;/p&gt;

&lt;p&gt;
The essential directory structure is very similar to any other Jekyll based blog
(with directories for include, templates, posts, &amp;#x2026;), but, opposite to Octopress
2, you don't have a Rakefile to build the blog neither a source dir with the sass
theme and the blog structure. So, if you want to see your changes locally you have
to run Jekyll serve.
&lt;/p&gt;

&lt;p&gt;
One of the things that I think they have enhanced in Octopress 3 is the publishing
management, because, instead of using Rake as with Octopress 2, they provide a ruby
command to manage all that, providing octopress new {post|page|draft} to generate
a new post, page or draft and octopress {publish|unpublish} to publish a draft or
unpublish a post, so the management of posts is now easier from my point of view.
Finally, with octopress deploy, you can deploy your changes to the final destination
(Github, another git repo, rsync, S3, &amp;#x2026;).
&lt;/p&gt;

&lt;p&gt;
You can have more information about Octopress 3 and Jekyll in the
&lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress 3 GitHub page&lt;/a&gt; and in the &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll project page&lt;/a&gt;. So, now that I have my blog
again working and linked with org-octopress I hope I can write more often.
&lt;/p&gt;

&lt;p&gt;
Happy Hacking!
&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 00:00:00 +0200</pubDate>
        <link>https://blog.ritho.net/emacs/2016/06/10/octopress-3.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/emacs/2016/06/10/octopress-3.html</guid>
        
        <category>Emacs</category>
        
        <category>octopress</category>
        
        <category>org-mode</category>
        
        
        <category>Emacs</category>
        
      </item>
    
      <item>
        <title>Make tests on Android projects III</title>
        <description>&lt;p&gt;
Hi all!&lt;/p&gt;

&lt;p&gt;
I had prepared the next entry of the Android testing tutorial, but I've found a
&lt;a href=&quot;http://www.vogella.com/articles/AndroidTesting/article.html&quot;&gt;tutorial&lt;/a&gt; that explains everything about it, even some of the projects that improve
the Android test environment, so I've decided not reinvent the wheel and stop this
tutorial. It's true that some parts seems more a summary than a tutorial, but there's
nothing essential missing.&lt;/p&gt;

&lt;p&gt;
I know you will miss my explanations, but, as usual, I don't have much time and I
prefer to blog about new things, so sorry about keeping you in the half of the process&lt;/p&gt;
&lt;p&gt;
:(.&lt;/p&gt;

&lt;p&gt;
Happy Hacking!&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2013 18:56:00 +0200</pubDate>
        <link>https://blog.ritho.net/android/java/development/2013/10/26/android-testing-III.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/android/java/development/2013/10/26/android-testing-III.html</guid>
        
        
        <category>Android</category>
        
        <category>Java</category>
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>Happy Birthday GNU!</title>
        <description>&lt;p&gt;
Hi all,&lt;/p&gt;

&lt;p&gt;
Some days ago the GNU project got 30 years, and, thinking about all the things
that GNU and the free software have given to us I think it's time to give them
a present. It doesn't have to be money (although they deserve it), but some code,
an article, an speech explaining the virtues of the free software, or even
installing a free software to a friend or a family member.&lt;/p&gt;

&lt;p&gt;
In my case, I'm going to renew my membership to fsfeurope and I'm going to
publish as free software a project that I'm doing with some partners. And you?
Are you going to give a present to GNU/fsf?&lt;/p&gt;

&lt;p&gt;
Happy Hacking&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Sep 2013 00:40:00 +0200</pubDate>
        <link>https://blog.ritho.net/gnu/free%20software/2013/09/30/GNU-30-years.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/gnu/free%20software/2013/09/30/GNU-30-years.html</guid>
        
        
        <category>GNU</category>
        
        <category>Free Software</category>
        
      </item>
    
      <item>
        <title>Make tests on Android projects II</title>
        <description>&lt;p&gt;
Hi all!&lt;/p&gt;

&lt;p&gt;
As I promised more than a year ago ;) I'm going to continue the small tutorial about testing
on Android. During this year the testing on android has evolved a little bit and now we can
see projects, like robotium, that, although they have some errors and features not (well)
covered, helps you a lot in the testing process. Said that, let's start!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;
The first step to test an android application (apart from having the code of the android
application, of course) is create a test project. For that we are going to use the command line,
mainly because, although you can use very complete graphical editors that helps you to do much of
the process automatically, I think it's important to know where the things come from and why the
things work in that way. So, the command line to create the test project (as we can check &lt;a href=&quot;https://developer.android.com/tools/testing/testing_otheride.html&quot;&gt;here&lt;/a&gt;) is:&lt;/p&gt;

&lt;p&gt;
$ android create test-project -m &amp;lt;main-path&amp;gt; -n &amp;lt;project-name&amp;gt; -p &amp;lt;test-path&amp;gt;&lt;/p&gt;

&lt;p&gt;
Where main-path is the path to the project of the application under test, project-name is the name
of the test project (not the name of the main project) and test-path is the directory where the test
project is going to be located. A test project depends on the android project that is testing, so is
going to compile against this project, recompiling (with a little bit of luck) all the source files
of the original project that needs to (re)compile, that's why we need to indicate the path of the
main project under test.&lt;/p&gt;

&lt;p&gt;
That also means that a test project is going to test only one application at a time, but it can be
updated to change the path of the main project for the case you want to test another project with the
same test project (for example, if you have two projects of the same application, one for a free
version and other for a premium version, or if you have a base test project that you want to adapt to
new applications).&lt;/p&gt;

&lt;p&gt;
The test project doesn't need to be located in any specific directory, so you can place it wherever you
want in your filesystem, but take care if you move the test project and you've defined a relative path
to the main project, because you'd need to update it.&lt;/p&gt;

&lt;p&gt;
If you check the test project just created, you can see that it haves the same directory structure and
build file contents as regular Android application project. That's because it's an actual Android
application that use the testing and instrumentation framework and depends on other application to run
(like an application that use a library).&lt;/p&gt;

&lt;p&gt;
The test framework is an extension of the JUnit test framework that adds access to the Android system
objects to test them, and the instrumentation framework is who actually execute the tests, starting the
application at the beginning of each test suite, shutting down the application once the test suite is
finished and who runs test by test of each test suite.&lt;/p&gt;

&lt;p&gt;
Well, that's enough for today. In the next post I'll explain the compilation process of a test project
(checking the options at the compilation files) and how to run both on test in particular and all the
tests of the test project. In that way you can see the basic structure of a test.&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;To be continued&amp;#x2026;&lt;/b&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Sep 2013 19:49:00 +0200</pubDate>
        <link>https://blog.ritho.net/android/java/development/2013/09/22/android-testing-II.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/android/java/development/2013/09/22/android-testing-II.html</guid>
        
        
        <category>Android</category>
        
        <category>Java</category>
        
        <category>Development</category>
        
      </item>
    
      <item>
        <title>I'm Back!</title>
        <description>&lt;p&gt;
Hi all!&lt;/p&gt;

&lt;p&gt;
I know it hass been more than a year without writing anything, but, between my
absorving work and the fact that I'm not really good with the written world (and
a little bit of lazyness, why no admit it), I didn't found the time to dedicate
to the blog.&lt;/p&gt;

&lt;p&gt;
Now I'm not going to give promises, but I'm going to try it hard to write at least
one post per week, and who knows, maybe once I've started to write I can write
more often and more fluently.&lt;/p&gt;

&lt;p&gt;
Well, you'll have notices from me during this week.&lt;/p&gt;

&lt;p&gt;
Happy Hacking!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Sep 2013 18:42:00 +0200</pubDate>
        <link>https://blog.ritho.net/general/2013/09/17/back.html</link>
        <guid isPermaLink="true">https://blog.ritho.net/general/2013/09/17/back.html</guid>
        
        
        <category>General</category>
        
      </item>
    
  </channel>
</rss>
