<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Java | Ritho's blog]]></title>
  <link href="https://blog.ritho.net/category/java/feed.xml" rel="self"/>
  <link href="https://blog.ritho.net/"/>
  <updated>2018-09-14T19:00:03-05:00</updated>
  <id>https://blog.ritho.net/</id>
  <author>
    <name><![CDATA[]]></name>
    <email><![CDATA[palvarez@ritho.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make tests on Android projects III]]></title>
    <link href="https://blog.ritho.net/android/java/development/2013/10/26/android-testing-III.html"/>
    <updated>2013-10-26T18:56:00-05:00</updated>
    <id>https://blog.ritho.net/android/java/development/2013/10/26/android-testing-III</id>
    <content type="html"><![CDATA[<p>
Hi all!</p>

<p>
I had prepared the next entry of the Android testing tutorial, but I've found a
<a href="http://www.vogella.com/articles/AndroidTesting/article.html">tutorial</a> that explains everything about it, even some of the projects that improve
the Android test environment, so I've decided not reinvent the wheel and stop this
tutorial. It's true that some parts seems more a summary than a tutorial, but there's
nothing essential missing.</p>

<p>
I know you will miss my explanations, but, as usual, I don't have much time and I
prefer to blog about new things, so sorry about keeping you in the half of the process</p>
<p>
:(.</p>

<p>
Happy Hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make tests on Android projects II]]></title>
    <link href="https://blog.ritho.net/android/java/development/2013/09/22/android-testing-II.html"/>
    <updated>2013-09-22T19:49:00-05:00</updated>
    <id>https://blog.ritho.net/android/java/development/2013/09/22/android-testing-II</id>
    <content type="html"><![CDATA[<p>
Hi all!</p>

<p>
As I promised more than a year ago ;) I'm going to continue the small tutorial about testing
on Android. During this year the testing on android has evolved a little bit and now we can
see projects, like robotium, that, although they have some errors and features not (well)
covered, helps you a lot in the testing process. Said that, let's start!</p>

<!--more-->

<p>
The first step to test an android application (apart from having the code of the android
application, of course) is create a test project. For that we are going to use the command line,
mainly because, although you can use very complete graphical editors that helps you to do much of
the process automatically, I think it's important to know where the things come from and why the
things work in that way. So, the command line to create the test project (as we can check <a href="https://developer.android.com/tools/testing/testing_otheride.html">here</a>) is:</p>

<p>
$ android create test-project -m &lt;main-path&gt; -n &lt;project-name&gt; -p &lt;test-path&gt;</p>

<p>
Where main-path is the path to the project of the application under test, project-name is the name
of the test project (not the name of the main project) and test-path is the directory where the test
project is going to be located. A test project depends on the android project that is testing, so is
going to compile against this project, recompiling (with a little bit of luck) all the source files
of the original project that needs to (re)compile, that's why we need to indicate the path of the
main project under test.</p>

<p>
That also means that a test project is going to test only one application at a time, but it can be
updated to change the path of the main project for the case you want to test another project with the
same test project (for example, if you have two projects of the same application, one for a free
version and other for a premium version, or if you have a base test project that you want to adapt to
new applications).</p>

<p>
The test project doesn't need to be located in any specific directory, so you can place it wherever you
want in your filesystem, but take care if you move the test project and you've defined a relative path
to the main project, because you'd need to update it.</p>

<p>
If you check the test project just created, you can see that it haves the same directory structure and
build file contents as regular Android application project. That's because it's an actual Android
application that use the testing and instrumentation framework and depends on other application to run
(like an application that use a library).</p>

<p>
The test framework is an extension of the JUnit test framework that adds access to the Android system
objects to test them, and the instrumentation framework is who actually execute the tests, starting the
application at the beginning of each test suite, shutting down the application once the test suite is
finished and who runs test by test of each test suite.</p>

<p>
Well, that's enough for today. In the next post I'll explain the compilation process of a test project
(checking the options at the compilation files) and how to run both on test in particular and all the
tests of the test project. In that way you can see the basic structure of a test.</p>

<p>
<b>To be continued&#x2026;</b></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make tests on Android projects I]]></title>
    <link href="https://blog.ritho.net/android/java/development/2012/05/01/android-testing.html"/>
    <updated>2012-05-01T21:45:00-05:00</updated>
    <id>https://blog.ritho.net/android/java/development/2012/05/01/android-testing</id>
    <content type="html"><![CDATA[<p>
Hi all!</p>

<p>
As you might know if you follow my blog I'm working at Schibsted, and
one of the projects we are developing is an Android application to
access to the classifieds websites of the company (like custojusto.pt,
bomnegocio.com, tori.fi, &#x2026;). One of the ideas that defines our work
method, Extreme Programming, is the continuous integration of the new
developments (or iterations) of the project, so we have to include
tests on every project we have in order to check the backward
compatibility, and the Android project is not an exception.</p>

<!--more-->

<p>
Making tests for any Android application (I should say on any mobile
application, but I've only seen Android and IOS) is a pain, and for a
lot of reasons, including:</p>

<ul class="org-ul">
<li>To test any android application you must have an android environment up and running.
That means that the tests are going to be slow because they are
going to run in a complete android environment (that can be a
virtual machine, an emulator or a real device).

<p>
It also means that you have to get several environment (android
version and devices) to test your application, because even with the
same version of Android the execution can be quite different between
on device and another (you find differences even between one device
emulator and the real device!).</p>

<p>
Only this can make the tests veeeeeery slow.</p>
</li>

<li>The test is a different project running in a different process.
This means that the test have to compile against the project, so
every change on the project lead to a clean and recompilation of all
the tests. That's because ant is not so good as Makefile checking
the dependencies of each file (at least by default in the Android
projects, I supose it can be quite better if you customize it to
resolve all your dependencies, but this is not the usual). Sometimes
even I uninstall all the test project in order to delete from the
emulator some garbage that adb/android didn't delete at the
reinstallation.

<p>
This also means that the test is responsible of running up the
applicatiion, set up all the parameters you need and shut down the
application. This is not bad, but I think the Android sdk should
include a testing environment capable of setting up and down the
application by you, so you don't have to do it in each test.</p>

<p>
Also, you have to know what actions have to be done at the test
process and what actions should be done at the application process
(or wait until the android test run an exception telling you that
you have to run some action in the application process).</p>

<p>
Finally, if your application depends on an external application
(like the gallery or an email application) it's almost impossible to
test this part of the application, because you can test and control
the application (or process) that you are developing, not an
external application, so in some cases there are parts of you
application impossible to test, because it's not possible (at least
I didn't found how) to simulate an external calling.</p>
</li>

<li>The documentation about testing is risible.
Appart of some basic documentation and examples at the official
<a href="https://developer.android.com/">android developers page</a> there isn't any documentation of quality
about the testing process, so it's very hard to learn how the tests
works and to make a good testsuite of your Android application. I've
found some posts that even recommend you to test your application
directly on the physical device :).
</li>
</ul>

<p>
For this reasons in the next few days I'm going to make a little
tutorial about how to make some tests to your Android application</p>

<p>
<b>To be continued&#x2026;</b></p>
]]></content>
  </entry>
  
</feed>
