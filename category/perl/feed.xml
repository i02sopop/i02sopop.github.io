<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Perl | Ritho's blog]]></title>
  <link href="https://blog.ritho.net/category/perl/feed.xml" rel="self"/>
  <link href="https://blog.ritho.net/"/>
  <updated>2020-03-25T04:05:30+01:00</updated>
  <id>https://blog.ritho.net/</id>
  <author>
    <name><![CDATA[]]></name>
    <email><![CDATA[palvarez@ritho.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to build your own perl module distribution]]></title>
    <link href="https://blog.ritho.net/perl/2019/03/10/perl-distribution.html"/>
    <updated>2019-03-10T00:00:00+01:00</updated>
    <id>https://blog.ritho.net/perl/2019/03/10/perl-distribution</id>
    <content type="html"><![CDATA[<p>
Every time I have the chance of programming in Perl, I enjoy it more and more
because it's a language that adapts to my needs very easily. Sometimes I want to
create a module to reuse the functionality that repeats over and over in my Perl
scripts. Still, until not long ago, I have never known how to prepare my Perl
modules to build and install them easily in my computers.
</p>

<p>
Recently I have finished reading the O'Reilly book <a href="https://www.intermediateperl.com/about/">Intermediate Perl</a>, which
contains a specific chapter on how to build your modules to distribute them and
another one on how to publish your package in CPAN. I want to summarize here what
I have learned in order both to have my own notes and don't forget about it and
to share my experience with you.
</p>

<p>
The first thing to do when you want to build your own Perl module distribution is
to initialize the first module you want to develop. For that, you can use
<b><i>module-starter</i></b>, which is a simple starter kit for any module. To install it
<b><i>CPAN</i></b> is your friend:
</p>

<div class="org-src-container">
<pre class="src src-sh">cpan -i Module::Starter
cpan -i Module::Starter::AddModule
cpan -i Module::Build
</pre>
</div>

<p>
Once installed you can use the command <b><i>module-starter</i></b> to create the basic
structure of the module:
</p>

<div class="org-src-container">
<pre class="src src-sh">module-starter --mb --module=<span style="color: #ffa07a;">"ModuleName"</span>
</pre>
</div>

<p>
This command creates a new subdirectory called <b><i>ModuleName</i></b> with the basic
structure of the module, including the directory <b><i>t</i></b> for tests, the directory
<b><i>lib</i></b> with the module file <b><i>ModuleName.pm</i></b>, the Perl script <b><i>Build.PL</i></b> with
configurations to generate the module distribution (something like a Makefile)
and the script <b><i>Build</i></b> to generate the module distribution. To build the module
itself, you usually use the following commands are:
</p>

<div class="org-src-container">
<pre class="src src-sh">Perl Build.PL
./Build
./Build test
./Build disttest
./Build dist
./Build install
</pre>
</div>

<p>
The first command, <b><i>perl Build.PL</i></b>, is going to update the <b><i>Build</i></b> script
when any configuration changes (if you add a new module or change the version
number, for example). After the <b><i>Build</i></b> script is updated, you can use it to
build the module, test it, run the tests for the distribution package, generate
a distribution package or install it in your system.
</p>

<p>
The module generated with <b><i>module-starter</i></b> has the default structure for any
Perl module, including the <b><i>perldoc</i></b> documentation section, the code that the
module includes and the end of the module itself, so it's ready for you to add
the code and put the proper documentation.
</p>

<p>
If you want to add a new module to the distribution, you can add it with the next
command:
</p>

<div class="org-src-container">
<pre class="src src-sh">module-starter --module=<span style="color: #ffa07a;">"ModuleName2"</span> --dist=.
</pre>
</div>

<p>
As you see, the command is pretty similar to the first one used to generate the
distribution, but with a new argument, <b><i>&#x2013;dist=.</i></b>, which indicates that the
module is going to be added to the distribution located in the current directory.
If you want to see more documentation on the building process, you can check the
<a href="https://metacpan.org/pod/Module::Build">module::Build documentation</a>, including the configuration options for <b><i>Build.PL</i></b>.
</p>

<p>
Once you are happy with your distribution, you can publish it to CPAN, which is
the subject for a next blog entry.
</p>

<p>
Happy Hacking!
</p>
]]></content>
  </entry>
  
</feed>
